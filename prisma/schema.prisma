// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employees {
  id           Int             @id @default(autoincrement())
  email        String          @unique
  firstname    String
  lastname     String
  password     String
  profileImage String?
  baseSalary   String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  role         Role            @default(USER)
  timetracking TimeTracking[]
  dayOff       DayOff[]
  advanceSalar AdvanceSalary[]
  salaryRecord SalaryRecord[]
}

enum Role {
  USER
  ADMIN
}

model TimeTracking {
  id       Int       @id @default(autoincrement())
  checkIn  DateTime? @default(now())
  checkOut DateTime? @db.Timestamp(0)
  date     DateTime  @default(now())

  Employees   Employees? @relation(fields: [employeesId], references: [id])
  employeesId Int?
}

model DayOff {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  reason    String?
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
  status    Status   @default(PENDING)

  Employees   Employees? @relation(fields: [employeesId], references: [id])
  employeesId Int?
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

model AdvanceSalary {
  id          Int        @id @default(autoincrement())
  requestDate DateTime
  amount      Decimal    @db.Decimal(10, 2)
  createdAt   DateTime   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime   @updatedAt @db.Timestamp(0)
  status      Status     @default(PENDING)
  employees   Employees? @relation(fields: [employeesId], references: [id], onDelete: Cascade)
  employeesId Int?
}

model SalaryRecord {
  id           Int        @id @default(autoincrement())
  month        DateTime   @default(now()) 
  baseSlary    Decimal    @db.Decimal(10, 2)
  advanceTaken Decimal    @db.Decimal(10, 2)
  finalSalary  Decimal    @db.Decimal(10, 2)
  Employees    Employees? @relation(fields: [employeesId], references: [id])
  employeesId  Int?
}
